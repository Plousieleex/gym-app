generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model users {
  id                        Int                    @id @unique @default(autoincrement())
  name_surname              String?
  email                     String                 @unique
  phone_number              String                 @unique
  username                  String                 @unique
  password                  String?
  createdAt                 DateTime               @default(now())
  passwordChangedAt         DateTime?
  userRole                  UserRole               @default(USER)
  userActive                Boolean                @default(false)
  isActivated               Boolean                @default(false)
  activationToken           String?
  activationTokenExpires    DateTime?
  provider                  String                 @default("local")
  loginSixDigitToken        String?
  loginSixDigitTokenExpires DateTime?
  deletedAt                 DateTime?
  lastLogoutAt              DateTime?
  passwordResetToken        String?
  passwordResetExpires      DateTime?
  emailChangeToken          String?
  emailChangeExpires        DateTime?
  user_profile              user_profile?
  oauth_providers           user_oauth_providers[]
  ownedWorkouts             workout[]              @relation("WorkoutCreator")
  joinedWorkouts            workout[]              @relation("WorkoutParticipants")

  @@map("users")
}

model user_profile {
  userId                Int       @id @unique
  user                  users     @relation(fields: [userId], references: [id])
  height                Int
  weight                Int
  age                   Int
  body_mass_index       Float
  training_experience   String
  training_aim          String[]
  user_sex              String    @db.Char(1)
  training_duration     Int
  birthdate             DateTime?
  social_media_accounts String?
  biography             String?
  profile_img           String?

  @@map("user_profiles")
}

model user_oauth_providers {
  id                    Int       @id @default(autoincrement())
  usersId               Int
  users                 users     @relation(fields: [usersId], references: [id])
  provider              String
  provider_id           String
  access_token_iv       String?
  access_token_content  String?
  refresh_token_iv      String?
  refresh_token_content String?
  token_expires         DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  @@unique([provider, provider_id])
  @@map("user_oath_providers")
}

model workout {
  id                  Int             @id @default(autoincrement())
  title               String
  workout_description String?
  workout_level       Int?
  workout_aim         String?
  workout_duration    Int? // How much days in 1 week?
  workout_routine     Int? // (6 to 8 weeks / 8 to 12 weeks / 12 weeks)
  creator             users           @relation("WorkoutCreator", fields: [creatorId], references: [id])
  creatorId           Int 
  isPublic            Boolean         @default(false)
  participants        users[]         @relation("WorkoutParticipants")
  daily_routine       daily_routine[]
  workout_img         String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@map("workouts")
}

model daily_routine {
  id                  Int        @id @default(autoincrement())
  title               String
  routine_description String?
  routine_img         String?
  workout             workout    @relation(fields: [workoutId], references: [id])
  workoutId           Int
  exercises           exercise[]
}

model exercise {
  id               Int           @id @default(autoincrement())
  exercise_title   String
  exercise_img     String
  exercise_vid     String
  exercise_aim_img String
  sets             Int
  reps             Int
  restSeconds      Int?
  daily_routine    daily_routine @relation(fields: [dailyRoutineId], references: [id])
  dailyRoutineId   Int
}
